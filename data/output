{
  "levels": [
    {
      "level": 1,
      "title": "Loops and Basics",
      "code": "total = 0\nfor i in range(1, 6):\n    total += i\nprint(\"Sum:\", total)\n\ncount = 0\nfor ch in \"python\":\n    if ch in 'aeiou':\n        count += 1\nprint(\"Vowels:\", count)\n\nx = 3\ny = 2\nprint(\"Power:\", x ** y)",
      "expected_output": "Sum: 15\nVowels: 1\nPower: 9"
    },
    {
      "level": 2,
      "title": "Lists and Conditions",
      "code": "nums = [2, 5, 8, 11, 14]\neven_sum = 0\nodd_sum = 0\nfor n in nums:\n    if n % 2 == 0:\n        even_sum += n\n    else:\n        odd_sum += n\nprint(\"Even Sum:\", even_sum)\nprint(\"Odd Sum:\", odd_sum)\n\nnums.reverse()\nprint(\"Reversed:\", nums)",
      "expected_output": "Even Sum: 24\nOdd Sum: 16\nReversed: [14, 11, 8, 5, 2]"
    },
    {
      "level": 3,
      "title": "Strings and Nested Loops",
      "code": "s = \"banana\"\nchar_count = {}\nfor ch in s:\n    if ch in char_count:\n        char_count[ch] += 1\n    else:\n        char_count[ch] = 1\nfor k, v in char_count.items():\n    print(k, v)\n\nfor i in range(3):\n    for j in range(2):\n        print(i, j, end=\" \")\n    print()",
      "expected_output": "b 1\na 3\nn 2\n0 0 0 1 \n1 0 1 1 \n2 0 2 1 "
    },
    {
      "level": 4,
      "title": "Functions and Recursion",
      "code": "def fact(n):\n    if n == 0:\n        return 1\n    return n * fact(n-1)\n\nprint(\"Factorial of 5:\", fact(5))\n\ndef fib(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(\"7th Fibonacci:\", fib(7))\n\nnums = [3, 1, 4]\nprint(\"Sorted:\", sorted(nums))",
      "expected_output": "Factorial of 5: 120\n7th Fibonacci: 13\nSorted: [1, 3, 4]"
    },
    {
      "level": 5,
      "title": "Classes and Advanced Logic",
      "code": "class Student:\n    def __init__(self, name, marks):\n        self.name = name\n        self.marks = marks\n    def average(self):\n        return sum(self.marks) / len(self.marks)\n\ns1 = Student(\"Arnav\", [80, 90, 70])\ns2 = Student(\"Yamini\", [60, 75, 85])\n\nprint(s1.name, s1.average())\nprint(s2.name, s2.average())\n\nstudents = [s1, s2]\nfor s in students:\n    if s.average() > 75:\n        print(s.name, \"passed\")\n    else:\n        print(s.name, \"needs improvement\")",
      "expected_output": "Arnav 80.0\nYamini 73.33333333333333\nArnav passed\nYamini needs improvement"
    }
  ]
}
